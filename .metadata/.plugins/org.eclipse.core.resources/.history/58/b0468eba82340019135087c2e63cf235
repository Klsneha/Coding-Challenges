package BinaryTrees;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

import BinaryTrees.LevelOrderInReverse.Node;

public class SprialBinaryTree {

	Node root=null;
	class Node{
		int key;
		Node left;
		Node right;
		
		Node(int d)
		{
			this.key=d;
			left=right=null;
		}
	}
	
	public void insert(Node root,int key)
	{
	
		Queue<Node> q=new LinkedList<Node>();
		
		if(root==null)
		{
			this.root=new Node(key);
			return;
		}
		q.add(root);
		
		while(!q.isEmpty())
		{
		 Node temp=q.remove();
		 if(temp.left==null)
		 {
			 temp.left=new Node(key);
			 break;
		 }
		 else {
			 q.add(temp.left);
		 }
		 
		 if(temp.right==null)
		 {
			 temp.right=new Node(key);
			 break;
		 }
		 else
		 {
			 q.add(temp.right);
		 }
		}
		
	}
	
	public void inorderTraversal(Node n)
	{
		if(n!=null)
		{
			inorderTraversal(n.left);
			System.out.println(n.key);
			inorderTraversal(n.right);
		}
	}
	
	public void printSpiral(Node root)
	{
		Stack<Node> s1=new Stack<Node>();
		Stack<Node> s2=new Stack<Node>();
		
		s1.add(root);
		Node current=null;
		while(!s1.isEmpty() || !s2.isEmpty())
		{
			while(!s1.isEmpty())
			{
				current=s1.pop();
				if(current.left!=null)
				{
					int data=current.left.key;
					s2.push(current.left);
				}
					
				if(current.right!=null)
				{
					int data=current.right.key;
					s2.push(current.right);
				}
					
				System.out.print(current.key);
			}
			
			while(!s2.isEmpty())
			{
				current=s2.pop();
				if(current.right!=null)
				{
					int data=current.right.key;
					s1.push(current.right);
				}
					
				if(current.left!=null)
				{
					int data=current.left.key;
					s1.push(current.left);
				}
					
				System.out.print(" "+current.key);
			}
		}
		
	}
	
	
	
	
	public static void main(String args[])
	{
		SprialBinaryTree s=new SprialBinaryTree();
		s.insert(s.root,1);
		s.insert(s.root,2);
		s.insert(s.root,3);
		s.insert(s.root,4);
		s.insert(s.root,5);
		s.insert(s.root,6);
		s.insert(s.root,7);
		s.insert(s.root,8);
		s.insert(s.root,9);
		s.insert(s.root,10);
		s.insert(s.root,11);
		s.inorderTraversal(s.root);
		s.printSpiral(s.root);
		
		
		
		
		
	}
}
