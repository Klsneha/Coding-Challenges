package BinaryTrees;

import java.util.LinkedList;
import java.util.Queue;

public class Insertion {

	Node root;
	static class Node{
		int key;
		Node left,right;
		
		Node(int d)
		{
			key=d;
			left=right=null;
		}
	}
	
	public void inorderTraversal(Node n)
	{
		if(n!=null)
		{
			inorderTraversal(n.left);
			System.out.println(n.key);
			inorderTraversal(n.right);
		}
	}
	
	public void insert(Node root, int key)
	{
		Queue<Node> q=new LinkedList<Node>();
		q.add(root);
		
		while(!q.isEmpty())
		{
		 Node temp=q.remove();
		 if(temp.left==null)
		 {
			 temp.left=new Node(key);
			 break;
		 }
		 else {
			 q.add(temp.left);
		 }
		 
		 if(temp.right==null)
		 {
			 temp.right=new Node(key);
			 break;
		 }
		 else
		 {
			 q.add(temp.right);
		 }
		}
		
	}
	
	public static void main(String args[])
	{
		Insertion i=new Insertion();
		i.root=new Node(10);
		i.root.left=new Node(11);
		i.root.left.left=new Node(7);
		i.root.left.right=new Node(5);
		i.root.right=new Node(9);
		i.root.right.left=new Node(15);
		i.root.right.right=new Node(8);
		
		i.inorderTraversal(i.root);
		i.insert(i.root,12);
		System.out.println("after insertion");
		i.inorderTraversal(i.root);
	}
}
